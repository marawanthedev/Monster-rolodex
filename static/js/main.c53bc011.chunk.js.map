{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","class","alt","name","email","CardList","monsters","map","Math","random","SearchBar","placeholder","handleChange","type","onChange","App","handleSearchInputChangeV2","e","setState","searchField","target","value","state","fetch","then","response","json","data","this","filter","toLowerCase","includes","filteredMonesters","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAgBeA,G,MAZK,SAACC,GAIjB,OAAQ,sBAAKC,UAAU,iBAAf,UACJ,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,mBAA8DC,MAAM,YAAYC,IAAI,KAC5F,6BAAKN,EAAMG,QAAQI,OACnB,6BAAKP,EAAMG,QAAQK,UAHuBR,EAAMG,QAAQC,MCHnDK,G,MAAS,SAACT,GAInB,OAAQ,qBAAKC,UAAU,YAAf,SAEXD,EAAMU,SAASC,KAAI,SAACR,GAAD,OAAY,cAAC,EAAD,CAAMA,QAASA,GAA4B,GAAdS,KAAKC,iBCUrDC,G,MAAU,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aACjC,OAAO,uBACPT,KAAK,GACLU,KAAK,SACLF,YAAaA,EACbX,GAAG,GACHH,UAAU,aACViB,SAAUF,MC+DCG,G,wDAnFb,aAAe,IAAD,8BACZ,gBA6CFC,0BAA4B,SAACC,GAC3B,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA7CtC,EAAKC,MAAQ,CACXhB,SAAU,GACVa,YAAa,IAJH,E,6GAaO,IAAD,OAElBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAKL,EAAKT,SAAS,CAAEZ,SAAUqB,S,8CAKRV,GAYtBW,KAAKV,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,U,0CAUnB,IAAD,OAClB,OAAOO,KAAKN,MAAMhB,SAASuB,QAAO,SAAC9B,GAAD,OAChCA,EAAQI,KAAK2B,cAAcC,SAAS,EAAKT,MAAMH,YAAYW,oB,+BAK7D,OACE,sBAAKjC,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,8BAEA,cAAC,EAAD,CACEc,YAAY,kBACZC,aAAcgB,KAAKZ,4BAUrB,cAAC,EAAD,CACEV,SAAUsB,KAAKI,oBACfb,YAAaS,KAAKN,MAAMH,qB,GA3EhBc,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c53bc011.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./card.styles.css.css\"\r\n// props are passed as functions arguemtsn\r\n export  const Card=(props)=> {\r\n\r\n    // props children\r\n\r\n    return( <div className=\"card-container\"  key={props.monster.id}>\r\n        <img src={`https://robohash.org/${props.monster.id}*2?size=200x200` } class=\"robot-img\" alt=\"\"/>\r\n        <h2>{props.monster.name}</h2>\r\n        <h2>{props.monster.email}</h2>\r\n    </div>)\r\n}\r\n\r\n// so components have to be defaultely exported\r\nexport default Card;","import React from \"react\";\r\n\r\nimport Card from \"../card/card.component\"\r\nimport \"./card-list.styles.css.css\"\r\n// props are passed as functions arguemtsn\r\nexport const CardList=(props)=> {\r\n\r\n    // props children\r\n\r\n    return( <div className=\"card-list\">\r\n        \r\n{props.monsters.map((monster)=> <Card monster={monster} key={Math.random()*10}></Card>)}\r\n    </div>)\r\n}\r\n","import \"./search-bar.css\";\r\n// export const SearchBar=()=>{\r\n    \r\n    \r\n//     \r\n\r\n// };\r\n\r\n// export class SearchBar extends React.Component{\r\n//     props=['data']\r\n//     state={\r\n//         searchField:\"\"\r\n//     }\r\n//     render(){\r\n//         return <div> <input className=\"search-bar\" placeholder=\"Search Monsters\" type=\"search\" onChange={(e)=>this. handleSearchFieldChanges(e.target.value)}></input> </div>;\r\n//     }\r\n//     componentDidMount(){\r\n//         console.log(this.props.handleSearchFieldChanges)\r\n//     }\r\n// }\r\n\r\nexport const SearchBar=({placeholder,handleChange})=>{\r\n    return <input\r\n    name=\"\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    id=\"\"\r\n    className=\"search-bar\"\r\n    onChange={handleChange}\r\n  ></input>\r\n}\r\nexport default SearchBar;\r\n","import { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component.jsx\";\nimport { SearchBar } from \"./components/search-box/search-box.component.jsx\";\nimport \"./index.css\";\nimport \"./App.css\";\n// transofrming this to a class instead of function\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n    // **we only do that if we are not using arrow functions\n    // this.handleSearchInputChange = this.handleSearchInputChange.bind(this);\n    // **the context is being created by the component class\n    // the class itself context is diff and what sets it up is Component class\n    // its being borrowed from react\n  }\n  componentDidMount() {}\n  componentDidMount() {\n    // mounted in vue\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((data) => {\n        // **i can not update data without using setstate\n        // which means that its differen from vue\n        // bcs i could set using either way\n        // but here i can only use setstate\n        this.setState({ monsters: data });\n        // so this doesnt work\n        // **this.state.users = data;\n      });\n  }\n  handleSearchInputChange(e) {\n    //** */ using a method to handle changes\n    // will result in having a different context\n    // which means that we will not be able to set state\n    // unless we bind this to the method call\n\n    // js doesnt set the scope of the function by default\n    // we need to explicity specify the context\n    // we can either use bind.this at the function call\n    // or specify it at the constructo by this.handlechange =this.handlechange.bind(this)\n    // which is a better way so we do have to bind the call everytime\n    // or we can have a better solution instead of manually binding each method by using arrow functions\n    this.setState({ searchField: e.target.value });\n\n    // setstate is async so we can not access state direclty bcs we dont know how much time\n    //** */ its going to take so we need to pass another callback to the set state\n  }\n\n  //** */ by using arrow functions we are automaitcally setting the context of the function to be similar to the context of where the function was written at\n  handleSearchInputChangeV2 = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  filteredMonesters() {\n    return this.state.monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"appHeader\">Monster rodoluex</h1>\n\n        <SearchBar\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleSearchInputChangeV2}\n        ></SearchBar>\n        {/* <input\n          name=\"\"\n          type=\"search\"\n          placeholder=\"Search Monsters\"\n          id=\"\"\n          className=\"search-bar\"\n          onChange={(e) => this.handleSearchInputChange(e.target.value)}\n        ></input> */}\n        <CardList\n          monsters={this.filteredMonesters()}\n          searchField={this.state.searchField}\n        >\n          {/* whatever is passed in here will be under the children of the component */}\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// notes\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       name: \"Yihua\",\n//       monsteres: [\n//         // one reason to use an internal id for this object\n//         // is if i have used the iteration index as a key\n//         // it would be localized to its lexical scope of the map function\n//         // and would not be accessed by outsiders\n//         // which is gonna make it immpossible to edit it unless we loop through it again\n//         // which is super un fucking efficient\n//         { name: \"Frankestiiin\" },\n//         { name: \"Hamada bomba\" },\n//         { name: \"Adek tzmr\" },\n//       ],\n//       users: [],\n//     };\n//   }\n//   componentDidMount() {\n//     // mounted in vue\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         // i can not update data without using setstate\n//         // which means that its differen fromt vue\n//         // bcs i could set using either way\n//         // but here i can only use setstate\n//         this.setState({ users: data });\n\n//         console.log(data);\n//         // so this doesnt work\n//         // this.state.users = data;\n//       });\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {/* {this.state.monsteres.map(\n//           (monster, index) => (\n//             // we can acutally genrate the id usng the map itself instead of writing it manually\n//             (monster.id = index), (<li key={index}>{monster.name}</li>)\n//           )\n//         )} */}\n//         {this.state.users.map((user) => (\n//           <ul class=\"user-list\" key={user.id}>\n//             <h2>User Info: </h2>\n//             <li class=\"user-list-item\">Name:{user.name}</li>\n//             <li class=\"user-list-item\">Email:{user.email}</li>\n//             <li class=\"user-list-item\">Website:{user.website}</li>\n//           </ul>\n//         ))}\n//         <hr></hr>\n//         {/* {this.state.monsteres.forEach((monster)=> monster.name)} */}\n//       </div>\n//     );\n//   }\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}