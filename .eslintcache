[{"C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\index.js":"1","C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\App.js":"2","C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\reportWebVitals.js":"3","C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\components\\card-list\\card-list.component.jsx":"4","C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\components\\card\\card.component.jsx":"5","C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\components\\search-box\\search-box.component.jsx":"6"},{"size":500,"mtime":1606784060751,"results":"7","hashOfConfig":"8"},{"size":5439,"mtime":1607535171616,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606784060751,"results":"10","hashOfConfig":"8"},{"size":373,"mtime":1607514346631,"results":"11","hashOfConfig":"8"},{"size":508,"mtime":1607530354764,"results":"12","hashOfConfig":"8"},{"size":785,"mtime":1607535382791,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"61wrh7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\index.js",[],["28","29"],"C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\App.js",["30"],"import { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component.jsx\";\nimport { SearchBar } from \"./components/search-box/search-box.component.jsx\";\nimport \"./index.css\";\nimport \"./App.css\";\n// transofrming this to a class instead of function\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n    // **we only do that if we are not using arrow functions\n    // this.handleSearchInputChange = this.handleSearchInputChange.bind(this);\n    // **the context is being created by the component class\n    // the class itself context is diff and what sets it up is Component class\n    // its being borrowed from react\n  }\n  componentDidMount() {}\n  componentDidMount() {\n    // mounted in vue\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((data) => {\n        // **i can not update data without using setstate\n        // which means that its differen from vue\n        // bcs i could set using either way\n        // but here i can only use setstate\n        this.setState({ monsters: data });\n        // so this doesnt work\n        // **this.state.users = data;\n      });\n  }\n  handleSearchInputChange(e) {\n    //** */ using a method to handle changes\n    // will result in having a different context\n    // which means that we will not be able to set state\n    // unless we bind this to the method call\n\n    // js doesnt set the scope of the function by default\n    // we need to explicity specify the context\n    // we can either use bind.this at the function call\n    // or specify it at the constructo by this.handlechange =this.handlechange.bind(this)\n    // which is a better way so we do have to bind the call everytime\n    // or we can have a better solution instead of manually binding each method by using arrow functions\n    this.setState({ searchField: e.target.value });\n\n    // setstate is async so we can not access state direclty bcs we dont know how much time\n    //** */ its going to take so we need to pass another callback to the set state\n  }\n\n  //** */ by using arrow functions we are automaitcally setting the context of the function to be similar to the context of where the function was written at\n  handleSearchInputChangeV2 = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  filteredMonesters() {\n    return this.state.monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"appHeader\">Monster rodoluex</h1>\n\n        <SearchBar\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleSearchInputChangeV2}\n        ></SearchBar>\n        {/* <input\n          name=\"\"\n          type=\"search\"\n          placeholder=\"Search Monsters\"\n          id=\"\"\n          className=\"search-bar\"\n          onChange={(e) => this.handleSearchInputChange(e.target.value)}\n        ></input> */}\n        <CardList\n          monsters={this.filteredMonesters()}\n          searchField={this.state.searchField}\n        >\n          {/* whatever is passed in here will be under the children of the component */}\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// notes\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       name: \"Yihua\",\n//       monsteres: [\n//         // one reason to use an internal id for this object\n//         // is if i have used the iteration index as a key\n//         // it would be localized to its lexical scope of the map function\n//         // and would not be accessed by outsiders\n//         // which is gonna make it immpossible to edit it unless we loop through it again\n//         // which is super un fucking efficient\n//         { name: \"Frankestiiin\" },\n//         { name: \"Hamada bomba\" },\n//         { name: \"Adek tzmr\" },\n//       ],\n//       users: [],\n//     };\n//   }\n//   componentDidMount() {\n//     // mounted in vue\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         // i can not update data without using setstate\n//         // which means that its differen fromt vue\n//         // bcs i could set using either way\n//         // but here i can only use setstate\n//         this.setState({ users: data });\n\n//         console.log(data);\n//         // so this doesnt work\n//         // this.state.users = data;\n//       });\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {/* {this.state.monsteres.map(\n//           (monster, index) => (\n//             // we can acutally genrate the id usng the map itself instead of writing it manually\n//             (monster.id = index), (<li key={index}>{monster.name}</li>)\n//           )\n//         )} */}\n//         {this.state.users.map((user) => (\n//           <ul class=\"user-list\" key={user.id}>\n//             <h2>User Info: </h2>\n//             <li class=\"user-list-item\">Name:{user.name}</li>\n//             <li class=\"user-list-item\">Email:{user.email}</li>\n//             <li class=\"user-list-item\">Website:{user.website}</li>\n//           </ul>\n//         ))}\n//         <hr></hr>\n//         {/* {this.state.monsteres.forEach((monster)=> monster.name)} */}\n//       </div>\n//     );\n//   }\n// }\n","C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\reportWebVitals.js",[],"C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\components\\card-list\\card-list.component.jsx",[],"C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\components\\card\\card.component.jsx",[],"C:\\Users\\Marwan\\Desktop\\Front end Web\\React\\monster-rodelox\\src\\components\\search-box\\search-box.component.jsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":22,"column":3,"nodeType":"37","messageId":"38","endLine":35,"endColumn":4},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-dupe-class-members","Duplicate name 'componentDidMount'.","MethodDefinition","unexpected","no-global-assign","no-unsafe-negation"]